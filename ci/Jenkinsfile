pipeline {
  agent { 
    node {
      label 'docker-arch-builder'
    }
  }
  triggers {
    pollSCM '*/2 * * * *'
  }
  stages {
    stage('build') {
      environment {
        CC = '/usr/bin/clang'
        CXX = '/usr/bin/clang++'
      }
      steps {
        echo "Building sample app..."
        sh '''
        mkdir -p build
        cd build
        cmake -G Ninja ..
        cmake --build . --config Release
        '''
        echo "Build completed."
      }
    }
    // TODO: add tests
    stage('release') {
      environment {
        GITHUB_TOKEN = credentials('github-token')
      }
      steps {
        script {
          // Definiowanie ścieżki do artefaktu
          def artefactPath = 'bin/Release/ModulesSampleApp'

          if (fileExists(artefactPath)) {
            sh '''
            curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type:application/json" https://api.github.com/repos/PoetaKodu/modules-sample/releases \
            -d '{
                  "tag_name": "v${BUILD_NUMBER}",
                  "target_commitish": "release",
                  "name": "v${BUILD_NUMBER}",
                  "body": "Release of build ${BUILD_NUMBER}",
                  "draft": false,
                  "prerelease": false
                }'
            '''

            // Wrzucanie artefaktu do release
            sh '''
            curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type:application/octet-stream" --data-binary @${artefactPath} https://uploads.github.com/repos/PoetaKodu/modules-sample/releases/latest/assets?name=ModulesSampleApp
            '''
          } else {
            echo "Artefact not found: ${artefactPath}"
          }
        }
      }
    }
  }
}